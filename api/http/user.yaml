openapi: 3.0.0
info:
  title: User API
  description: API for user management and authentication
  version: 1.0.0

servers:
  - url: /
    description: API v1

tags:
  - name: Auth
    description: Authentication operations
  - name: Users
    description: User management operations

paths:
  /api/v1/auth/register:
    post:
      tags:
        - Auth
      operationId: registerUser
      summary: Register a new user
      description: Creates a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserParams"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/auth/login:
    post:
      tags:
        - Auth
      operationId: loginUser
      summary: Login a user
      description: Authenticates a user and returns a token pair
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserParams"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/auth/logout:
    post:
      tags:
        - Auth
      operationId: logoutUser
      summary: Logout a user
      description: Invalidates the refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
              required:
                - refresh_token
      responses:
        "204":
          description: Logged out successfully
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/users/me:
    get:
      tags:
        - Users
      operationId: getCurrentUser
      summary: Get current user
      description: Returns the authenticated user's details
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Current user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    StandardResponse:
      type: object
      properties:
        data:
          type: object
          description: Response data
        message:
          type: string
          description: Response message
        code:
          type: string
          description: Response code
        server_time:
          type: string
          format: date-time
          description: Server timestamp
      required:
        - data
        - message
        - code
        - server_time

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        data:
          type: object
          nullable: true
          description: Additional error data
        server_time:
          type: string
          format: date-time
          description: Server timestamp
      required:
        - message
        - code
        - server_time

    UserResponse:
      allOf:
        - $ref: "#/components/schemas/StandardResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/User"

    UserListResponse:
      allOf:
        - $ref: "#/components/schemas/StandardResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: "#/components/schemas/User"
                meta:
                  $ref: "#/components/schemas/PaginationMeta"

    TokenResponse:
      allOf:
        - $ref: "#/components/schemas/StandardResponse"
        - type: object
          properties:
            data:
              type: object
              properties:
                access_token:
                  type: string
                  description: JWT access token
                refresh_token:
                  type: string
                  description: Refresh token for obtaining a new access token
                expires_in:
                  type: integer
                  description: Token expiration time in seconds
                token_type:
                  type: string
                  default: bearer
                  description: Token type

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [admin, customer]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RegisterUserParams:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 100
        role:
          type: string
          enum: [admin, customer]
          default: customer
      required:
        - name
        - email
        - password

    LoginUserParams:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    UpdateUserParams:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, customer]

    UpdatePasswordParams:
      type: object
      properties:
        current_password:
          type: string
        new_password:
          type: string
          minLength: 8
          maxLength: 100
      required:
        - current_password
        - new_password
